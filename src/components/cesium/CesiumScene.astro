---
import 'cesium/Build/Cesium/Widgets/widgets.css';
---

<script>
  window.CESIUM_BASE_URL = '/cesium';
  Ion.defaultAccessToken = import.meta.env.PUBLIC_CESIUM_TOKEN;

  import pointsData from '@content/points-of-interest/points.json';
  import {
    activePages,
    activeModel,
    buildingId,
    activeMapLayer,
    activeGISLayer,
    buildingColorSetting,
    isSelectColorByDistance,
    colorByDistancePosition,
    flyToPosition,
    userSettings,
    toastMessage,
    pointId,
    showPoints,
  } from '@store';

  import {
    Cartesian2,
    Cartesian3,
    createOsmBuildingsAsync,
    Ion,
    Math as CesiumMath,
    Terrain,
    Viewer,
    Cesium3DTileStyle,
    ScreenSpaceEventType,
    defined,
    JulianDate,
    Cesium3DTileset,
    ClippingPlaneCollection,
    ClippingPlane,
    Transforms,
    IonImageryProvider,
    ImageryLayer,
    EllipsoidGeodesic,
    GeoJsonDataSource,
    ClassificationType,
    Color,
    Model,
    ConstantProperty,
    HeightReference,
    Camera,
    BillboardCollection,
    DistanceDisplayCondition,
    ClockStep,
    ClockRange,
  } from 'cesium';
  import { OSM_DISTANCE_COLORS, OSM_SHOW_CONDITIONS } from './cesiumUtils';
  import { load as loadRhinoModels } from './rhinoBuildingModels';
  import { load as loadBuildingInformationModels } from './buildingInformationModels';
  import { mapboxSatellite, mapboxDark, mapboxStreet, type MapLayers } from './mapLayers';

  (function initReducedMotion() {
    const isReduced = window.matchMedia(`(prefers-reduced-motion: reduce)`).matches;
    userSettings.setKey('reducedMotion', isReduced);
    isReduced ? document.body.classList.add('reduce-motion') : document.body.classList.remove('reduce-motion');
  })();

  let rhinoBuildingModels: Array<Model | Cesium3DTileset> = [];
  let buildingInformationModels: Array<Model | Cesium3DTileset> = [];

  // Initialize the Cesium Viewer in the HTML element with the `cesiumContainer` ID.
  const viewer = new Viewer('cesiumContainer', {
    terrain: Terrain.fromWorldTerrain(),
    navigationHelpButton: false,
    homeButton: false,
    fullscreenButton: false,
    baseLayerPicker: false,
    sceneModePicker: false,
    animation: false, // Disables the Cesium animation clock
    geocoder: false, // Disables the Cesium search button
    infoBox: false,
    baseLayer: ImageryLayer.fromProviderAsync(IonImageryProvider.fromAssetId(3954), {}), // Default to Sentinel-2 base layer
  });

  const globe = viewer.scene.globe;
  const canvas = viewer.scene.canvas;
  const handler = viewer.screenSpaceEventHandler;

  // Disables double click on GeoJSON to focus
  handler.removeInputAction(ScreenSpaceEventType.LEFT_DOUBLE_CLICK);

  // @ts-ignore: https://community.cesium.com/t/change-timeline-from-utc-to-local-time/11203/7
  viewer.timeline.makeLabel = function (timelineDate: any) {
    const date = JulianDate.toDate(timelineDate);
    const dateFormatter = new Intl.DateTimeFormat('en-SG', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: 'numeric',
      minute: 'numeric',
      hour12: false,
    });

    return dateFormatter.format(date);
  };

  const now = new Date();
  const start = JulianDate.fromDate(new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0));
  const end = JulianDate.fromDate(new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59, 999));
  viewer.clock.startTime = start.clone();
  viewer.clock.stopTime = end.clone();
  viewer.clock.currentTime = start.clone();
  viewer.clock.clockRange = ClockRange.LOOP_STOP;
  viewer.clock.clockStep = ClockStep.SYSTEM_CLOCK;
  viewer.timeline.zoomTo(start, end);

  // Limit amount to zoom in and out to
  viewer.scene.screenSpaceCameraController.minimumZoomDistance = 100.0;
  viewer.scene.screenSpaceCameraController.maximumZoomDistance = 10000.0;

  const DEFAULT_TILE_CACHE_SIZE = 100;
  globe.tileCacheSize = DEFAULT_TILE_CACHE_SIZE * 1;

  // Simulate loading percentage until map tiles are requested
  const loadingPercentage = document.querySelector('#loading-percentage')!;
  const loadingProgress = document.getElementById('loading-progress')!;
  const offsetPercent = 30;
  (function addLoadPercentUntilOffset() {
    setTimeout(() => {
      const currPercent = Number(loadingPercentage.textContent);
      if (currPercent >= offsetPercent) {
        return;
      }
      const newPercent = currPercent + Math.floor(Math.random() * 3);
      loadingPercentage.textContent = `${newPercent}`;
      loadingProgress.style.width = `${newPercent}%`;
      addLoadPercentUntilOffset();
    }, 100);
  })();

  // The displayed map layer is the last layer
  let mapLayerOrder: MapLayers[] = [];

  const addMapLayer = (layer: MapLayers) => {
    mapLayerOrder.unshift(layer);

    switch (layer) {
      case 'satellite':
        viewer.imageryLayers.lowerToBottom(viewer.imageryLayers.addImageryProvider(mapboxSatellite));
        break;
      case 'dark':
        viewer.imageryLayers.lowerToBottom(viewer.imageryLayers.addImageryProvider(mapboxDark));
        break;
      case 'street':
        viewer.imageryLayers.lowerToBottom(viewer.imageryLayers.addImageryProvider(mapboxStreet));
        break;
    }
  };

  const showMapbox = import.meta.env.PROD || import.meta.env.PUBLIC_SHOW_MAPBOX === 'true';
  if (showMapbox) {
    viewer.imageryLayers.removeAll();
    addMapLayer(activeMapLayer.get());
  }

  const position = Cartesian3.fromDegrees(103.77678, 1.28342, 800);

  let nusView = {
    destination: position,
    orientation: {
      heading: CesiumMath.toRadians(0.0),
      pitch: CesiumMath.toRadians(-30.0),
    },
  };
  viewer.camera.setView(nusView);

  document.getElementById('home-btn')!.onclick = () => {
    toastMessage.set({
      msg: 'Resetting view',
      type: 'loading',
    });

    let flyToOptions: {
      destination: Cartesian3;
      orientation?: any;
      duration?: number;
      complete?: Camera.FlightCompleteCallback;
    } = {
      ...nusView,
      complete: () => {
        toastMessage.set({
          msg: 'View has been reset',
          type: 'loaded',
        });
      },
    };

    if (userSettings.get().reducedMotion) {
      flyToOptions['duration'] = 0;
    }

    viewer.camera.flyTo(flyToOptions);
  };

  const osmBuildingsTileset = await createOsmBuildingsAsync();
  osmBuildingsTileset.clippingPlanes = new ClippingPlaneCollection({
    modelMatrix: Transforms.eastNorthUpToFixedFrame(position),
    planes: [
      new ClippingPlane(new Cartesian3(1.0, 0.0, 0.0), 850),
      new ClippingPlane(new Cartesian3(-1.0, 0.0, 0.0), 700),
      new ClippingPlane(new Cartesian3(0.0, 1.0, 0.0), -600),
      new ClippingPlane(new Cartesian3(0.0, -1.0, 0.0), 2800),
    ],
    unionClippingRegions: true,
  });
  osmBuildingsTileset.style = new Cesium3DTileStyle({
    show: { conditions: OSM_SHOW_CONDITIONS },
  });
  osmBuildingsTileset.maximumScreenSpaceError = 0;
  osmBuildingsTileset.preloadWhenHidden = true;
  viewer.scene.primitives.add(osmBuildingsTileset);

  let totalTiles = 0;
  function tileLoadProgressListener(queuedTiles: number) {
    const prevTotalTiles = totalTiles;
    totalTiles = Math.max(totalTiles, queuedTiles);

    if (prevTotalTiles == totalTiles) {
      const currPercent = Number(loadingPercentage.textContent);
      const newPercent = offsetPercent + Math.round(((totalTiles - queuedTiles) / totalTiles) * (100 - offsetPercent));
      if (newPercent > currPercent) {
        loadingPercentage.textContent = `${newPercent}`;
        loadingProgress.style.width = `${newPercent}%`;
      }
    }

    if (globe.tilesLoaded && osmBuildingsTileset.allTilesLoaded) {
      updateDistanceScale();

      if (showMapbox) {
        if (!mapLayerOrder.includes('dark')) {
          addMapLayer('dark');
        }
        if (!mapLayerOrder.includes('satellite')) {
          addMapLayer('satellite');
        }
        if (!mapLayerOrder.includes('street')) {
          addMapLayer('street');
        }
      }

      // Outer timeout is required for the translate animation to complete
      setTimeout(() => {
        document.getElementById('loading-modal')?.classList.add('close');
        setTimeout(() => {
          document.getElementById('loading-modal')?.remove();
        }, 200);
      }, 350);
      globe.tileLoadProgressEvent.removeEventListener(tileLoadProgressListener);
    }
  }

  globe.tileLoadProgressEvent.addEventListener(tileLoadProgressListener);

  handler.setInputAction(function (movement: any) {
    const pickedFeature = viewer.scene.pick(movement.position);
    if (!defined(pickedFeature)) {
      return;
    }

    if (isSelectColorByDistance.get()) {
      colorByDistance(pickedFeature.getProperty('cesium#latitude'), pickedFeature.getProperty('cesium#longitude'));
      isSelectColorByDistance.set(false);
      return;
    }

    if (pickedFeature.id && pickedFeature.id.type === 'points-of-interest') {
      pointId.set(pickedFeature.id.id);
      activePages.set({
        left: 'point-info',
        right: activePages.get().right,
        bottom: 'point-info',
      });
      return;
    }

    if (pickedFeature.id) {
      switch (true) {
        case buildingFootprintsData.entities.contains(pickedFeature.id):
          break;
        case streetCenterlinesData.entities.contains(pickedFeature.id):
          break;
        case greenSpacesData.entities.contains(pickedFeature.id):
          break;
      }
      return;
    }

    // Disable picking for Rhino Urban Model
    if (pickedFeature.primitive && pickedFeature.primitive.featureIdLabel === 'rhino-urban-model') {
      toastMessage.set({
        msg: 'Selecting individual buildings is unavailable for Rhino (Urban) models',
        type: 'default',
      });
      return;
    }

    activePages.set({
      ...activePages.get(),
      left: 'building-info',
      bottom: activePages.get().bottom === 'energy' ? 'energy' : 'building-info',
    });
    buildingId.set(''); // Force the listener on buildingId to trigger

    if (
      pickedFeature.primitive &&
      pickedFeature.primitive.featureIdLabel &&
      pickedFeature.primitive.featureIdLabel !== 'featureId_0'
    ) {
      buildingId.set(pickedFeature.primitive.featureIdLabel);
      return;
    }

    buildingId.set(pickedFeature.getProperty('elementId'));
  }, ScreenSpaceEventType.LEFT_CLICK);

  const geodesic = new EllipsoidGeodesic();
  const distances = [1, 2, 3, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 100, 200, 300, 400, 500, 750, 1000];
  const width = canvas.clientWidth;
  const height = canvas.clientHeight;
  const scaleLabel = document.getElementById('scale-label')!;
  const scaleBar = document.getElementById('scale-bar')!;
  function updateDistanceScale() {
    const left = viewer.scene.camera.getPickRay(new Cartesian2((width / 2) | 0, height - 1));
    const right = viewer.scene.camera.getPickRay(new Cartesian2((1 + width / 2) | 0, height - 1));

    if (!left || !right) {
      return;
    }

    const leftPosition = globe.pick(left, viewer.scene);
    const rightPosition = globe.pick(right, viewer.scene);

    if (!leftPosition || !rightPosition) {
      return;
    }

    const leftCartographic = globe.ellipsoid.cartesianToCartographic(leftPosition);
    const rightCartographic = globe.ellipsoid.cartesianToCartographic(rightPosition);

    geodesic.setEndPoints(leftCartographic, rightCartographic);
    const pixelDistance = geodesic.surfaceDistance;
    // Find the first distance that makes the scale bar less than 100 pixels.
    const maxBarWidth = 100;
    let distance;
    for (let i = distances.length - 1; !defined(distance) && i >= 0; --i) {
      if (distances[i] / pixelDistance < maxBarWidth) {
        distance = distances[i];
      }
    }

    if (defined(distance)) {
      let label;
      if (distance >= 1000) {
        label = (distance / 1000).toString() + ' km';
      } else {
        label = distance.toString() + ' m';
      }

      const barWidth = distance / pixelDistance;
      scaleBar.style.width = barWidth + 'px';
      scaleLabel.textContent = label;
    }
  }

  // loadBuildingInformationModels().then((models) => {
  //   buildingInformationModels = models;
  //   for (const model of buildingInformationModels) {
  //     viewer.scene.primitives.add(model);
  //     model.show = false;
  //   }
  // });

  function showAllBIM() {
    for (let i = 0; i < buildingInformationModels.length; i++) {
      buildingInformationModels[i].show = true;
    }
  }

  function hideAllBIM() {
    for (let i = 0; i < buildingInformationModels.length; i++) {
      buildingInformationModels[i].show = false;
    }
  }

  const rhinoUrbanModel = await Cesium3DTileset.fromUrl('/urban/data/tileset.json', {
    show: false,
    featureIdLabel: 'rhino-urban-model',
  });
  viewer.scene.primitives.add(rhinoUrbanModel);

  // loadRhinoModels().then((models) => {
  //   rhinoBuildingModels = models;
  //   for (const model of rhinoBuildingModels) {
  //     viewer.scene.primitives.add(model);
  //   }
  // });

  function showRhinoBuildings() {
    for (const model of rhinoBuildingModels) {
      model.show = true;
    }
  }

  function hideRhinoBuildings() {
    for (const model of rhinoBuildingModels) {
      model.show = false;
    }
  }

  function colorByDistance(selectedLatitude: number, selectedLongitude: number) {
    colorByDistancePosition.set({
      latitude: selectedLatitude,
      longitude: selectedLongitude,
    });

    osmBuildingsTileset.style = new Cesium3DTileStyle({
      defines: {
        distance: `distance(vec2(\${feature['cesium#longitude']}, \${feature['cesium#latitude']}), vec2(${selectedLongitude},${selectedLatitude}))`,
      },
      color: { conditions: OSM_DISTANCE_COLORS },
      show: { conditions: OSM_SHOW_CONDITIONS },
    });
  }
  function colorByNone() {
    osmBuildingsTileset.style = new Cesium3DTileStyle({ show: { conditions: OSM_SHOW_CONDITIONS } });
  }

  const pointsOfInterest = new BillboardCollection({
    scene: viewer.scene,
    show: showPoints.get(),
  });
  pointsData.forEach(({ longitude, latitude, id }) => {
    pointsOfInterest.add({
      position: Cartesian3.fromDegrees(longitude, latitude),
      image: '../dot.png',
      sizeInMeters: true,
      height: 16,
      width: 16,
      distanceDisplayCondition: new DistanceDisplayCondition(0, 4000),
      heightReference: HeightReference.RELATIVE_TO_GROUND,
      id: { id: id, type: 'points-of-interest' },
    });
  });

  viewer.scene.primitives.add(pointsOfInterest);

  showPoints.listen((isShow) => (pointsOfInterest.show = isShow));

  const buildingFootprintsData = await GeoJsonDataSource.load('/shapefiles/footprints/buildings.json', {
    stroke: Color.fromCssColorString('#0e7490ff'),
    fill: Color.fromCssColorString('#06b6d4cc'),
  });
  const streetCenterlinesData = await GeoJsonDataSource.load('/shapefiles/centerlines/roads.json', {
    stroke: Color.fromCssColorString('#ca8a04ff'),
    clampToGround: true,
  });
  const greenSpacesData = await GeoJsonDataSource.load('/shapefiles/green-spaces/natural.json', {
    stroke: Color.fromCssColorString('#15803dff'),
    fill: Color.fromCssColorString('#22c55ecc'),
  });

  viewer.dataSources.add(buildingFootprintsData);
  viewer.dataSources.add(streetCenterlinesData);
  viewer.dataSources.add(greenSpacesData);

  // Prevent the lines from overlaying on top of 3D tiles
  streetCenterlinesData.entities.values.forEach((entity) => {
    if (entity.polyline) {
      entity.polyline.classificationType = new ConstantProperty(ClassificationType.TERRAIN);
    }
  });

  buildingFootprintsData.entities.values.forEach((entity) => {
    if (entity.polygon) {
      entity.polygon.heightReference = new ConstantProperty(HeightReference.CLAMP_TO_TERRAIN);
    }
  });

  greenSpacesData.entities.values.forEach((entity) => {
    if (entity.polygon) {
      entity.polygon.heightReference = new ConstantProperty(HeightReference.CLAMP_TO_TERRAIN);
    }
  });

  activeGISLayer.subscribe((val) => {
    buildingFootprintsData.show = val.has('building-footprints');
    streetCenterlinesData.show = val.has('street-centerlines');
    greenSpacesData.show = val.has('green-spaces');
  });

  flyToPosition.subscribe((val) => {
    if (!val || !userSettings.get().moveCameraOnSearch) {
      return;
    }

    const position = {
      destination: Cartesian3.fromDegrees(val.longitude, val.latitude - 0.005, 400),
      orientation: {
        heading: CesiumMath.toRadians(0.0),
        pitch: CesiumMath.toRadians(-30.0),
      },
    };

    if (userSettings.get().reducedMotion) {
      viewer.camera.setView(position);
    } else {
      viewer.camera.flyTo(position);
    }
  });

  buildingColorSetting.subscribe((colorSetting) => {
    if (colorSetting === 'distance') {
      const { latitude, longitude } = colorByDistancePosition.get();
      colorByDistance(latitude, longitude);
    } else {
      colorByNone();
    }
  });

  let isFirstCall = true;
  activeModel.subscribe((model) => {
    if (!isFirstCall && model) {
      toastMessage.set({
        msg: 'Loading models',
        type: 'loading',
      });
    }

    const startRender = () => {
      viewer.scene.postRender.addEventListener(endRender);
      viewer.scene.preRender.removeEventListener(startRender);
    };
    const endRender = () => {
      toastMessage.set({
        msg: 'Model loaded',
        type: 'loaded',
      });
      viewer.scene.postRender.removeEventListener(endRender);
    };

    // Allow toast to render first
    setTimeout(
      () => {
        if (!isFirstCall && model) {
          viewer.scene.preRender.addEventListener(startRender);
        }
        osmBuildingsTileset.show = model === 'osm';
        rhinoUrbanModel.show = model === 'rhino-urban';
        model === 'bim' ? showAllBIM() : hideAllBIM();
        model === 'rhino-building' ? showRhinoBuildings() : hideRhinoBuildings();

        isFirstCall = false;
      },
      model ? 100 : 0,
    );
  });

  activeMapLayer.subscribe((selectedMapLayer) => {
    if (!showMapbox) {
      return;
    }

    let hasLoadingToast = false;
    const updateLayer = () => {
      if (mapLayerOrder.indexOf(selectedMapLayer) === -1) {
        toastMessage.set({
          msg: 'Loading map layer',
          type: 'loading',
        });
        hasLoadingToast = true;
        setTimeout(() => updateLayer(), 100);
        return;
      }

      if (hasLoadingToast) {
        toastMessage.set({
          msg: 'Map layer loaded',
          type: 'loaded',
        });
      }

      viewer.imageryLayers.raiseToTop(viewer.imageryLayers.get(mapLayerOrder.indexOf(selectedMapLayer)));
      mapLayerOrder = [...mapLayerOrder.filter((l) => l !== selectedMapLayer), selectedMapLayer];
    };

    updateLayer();
  });

  viewer.camera.moveEnd.addEventListener(function () {
    updateDistanceScale();
  });

  userSettings.subscribe(({ reducedMotion }) => {
    reducedMotion ? document.body.classList.add('reduce-motion') : document.body.classList.remove('reduce-motion');
  });

  const LOGO_SIZE = 68;
  const LOGO_MARGIN = 16;
  document.getElementById('screenshot-btn')!.onclick = () => {
    toastMessage.set({
      msg: 'Generating screenshot',
      type: 'loading',
    });
    viewer.resolutionScale = 2.0;
    viewer.scene.render(viewer.clock.currentTime);

    const cesiumImg = document.createElement('img');
    cesiumImg.src = canvas.toDataURL('image/png', 1.0);
    const logoImg = document.createElement('img');
    logoImg.src = '/favicon.png';

    cesiumImg.onload = onImageLoad;
    logoImg.onload = onImageLoad;

    let imagesLoaded = 0;
    function onImageLoad() {
      imagesLoaded++;
      if (imagesLoaded === 2) {
        const imgCanvas = document.createElement('canvas');
        const ctx = imgCanvas.getContext('2d')!;
        imgCanvas.width = cesiumImg.width;
        imgCanvas.height = cesiumImg.height;
        ctx.drawImage(cesiumImg, 0, 0);
        ctx.globalAlpha = 0.7;
        ctx.drawImage(logoImg, LOGO_MARGIN, cesiumImg.height - LOGO_SIZE - LOGO_MARGIN, LOGO_SIZE, LOGO_SIZE);
        ctx.globalAlpha = 1;

        const link = document.createElement('a');
        link.href = imgCanvas.toDataURL('image/png', 1.0);
        link.download = 'NUS Digital Twin';
        link.click();

        toastMessage.set({
          msg: 'Generated screenshot',
          type: 'loaded',
        });
      }
    }

    viewer.resolutionScale = 1.0;
  };
</script>

<div id="cesiumContainer"></div>
<div id="loading-modal">
  <h1>NUS Digital Twin</h1>
  <div>
    <div id="loading-bar">
      <div id="loading-progress"></div>
    </div>
    <div id="loading-text">
      Loading...<span id="loading-percentage">0</span>%
    </div>
  </div>
</div>

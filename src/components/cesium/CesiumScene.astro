---
import 'cesium/Build/Cesium/Widgets/widgets.css';
---

<script>
  window.CESIUM_BASE_URL = '/cesium';
  Ion.defaultAccessToken = import.meta.env.PUBLIC_CESIUM_TOKEN;

  import buildingsData from '../../content/buildings/buildings.json';
  import {
    activeMenu,
    buildingProperties,
    searchQuery,
    buildingDataLayer,
    mapLayer,
    buildingColorSetting,
    isSelectColorByDistance,
    colorByDistancePosition,
  } from '../../store';
  import {
    Cartesian3,
    createOsmBuildingsAsync,
    Ion,
    Math as CesiumMath,
    Terrain,
    Viewer,
    Cesium3DTileStyle,
    ScreenSpaceEventType,
    defined,
    MapboxStyleImageryProvider,
    JulianDate,
    Cesium3DTileset,
    ClippingPlaneCollection,
    ClippingPlane,
    Transforms,
    IonImageryProvider,
    ImageryLayer,
  } from 'cesium';
  import { OSM_DISTANCE_COLORS, OSM_SHOW_CONDITIONS } from './cesiumSceneUtils';

  // Initialize the Cesium Viewer in the HTML element with the `cesiumContainer` ID.
  const viewer = new Viewer('cesiumContainer', {
    terrain: Terrain.fromWorldTerrain(),
    navigationHelpButton: false,
    homeButton: false,
    fullscreenButton: false,
    baseLayerPicker: false,
    sceneModePicker: false,
    animation: false, // Disables the Cesium animation clock
    geocoder: false, // Disables the Cesium search button
    baseLayer: ImageryLayer.fromProviderAsync(IonImageryProvider.fromAssetId(3954), {}), // Default to Sentinel-2 base layer
  });

  // @ts-ignore: https://community.cesium.com/t/change-timeline-from-utc-to-local-time/11203/7
  viewer.timeline.makeLabel = function (timelineDate: any) {
    const date = JulianDate.toDate(timelineDate);
    const dateFormatter = new Intl.DateTimeFormat('en-SG', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: 'numeric',
      minute: 'numeric',
      hour12: false,
    });

    return dateFormatter.format(date);
  };

  // Limit amount to zoom in and out to
  viewer.scene.screenSpaceCameraController.minimumZoomDistance = 100.0;
  viewer.scene.screenSpaceCameraController.maximumZoomDistance = 10000.0;

  // Simulate loading percentage until map tiles are requested
  const loadPercentage = document.querySelector('#load-percentage');
  const offsetPercent = 40;
  (function addLoadPercentUntilOffset() {
    setTimeout(() => {
      const currPercent = Number(loadPercentage?.textContent) || 0;
      if (currPercent >= offsetPercent) {
        return;
      }
      loadPercentage!.textContent = `${currPercent + Math.floor(Math.random() * 3) + 1}`;
      addLoadPercentUntilOffset();
    }, 100);
  })();

  const mapboxSatellite = new MapboxStyleImageryProvider({
    styleId: 'satellite-v9',
    accessToken: import.meta.env.PUBLIC_MAPBOX_TOKEN,
  });
  const mapboxDark = new MapboxStyleImageryProvider({
    styleId: 'dark-v11',
    accessToken: import.meta.env.PUBLIC_MAPBOX_TOKEN,
  });
  const mapboxStreet = new MapboxStyleImageryProvider({
    styleId: 'streets-v12',
    accessToken: import.meta.env.PUBLIC_MAPBOX_TOKEN,
  });
  let mapLayerOrder = ['satellite', 'dark', 'street'];
  const showMapbox = import.meta.env.PROD || import.meta.env.PUBLIC_SHOW_MAPBOX === 'true';
  if (showMapbox) {
    viewer.imageryLayers.removeAll();
    viewer.imageryLayers.addImageryProvider(mapboxStreet);
    viewer.imageryLayers.lowerToBottom(viewer.imageryLayers.addImageryProvider(mapboxDark));
    viewer.imageryLayers.lowerToBottom(viewer.imageryLayers.addImageryProvider(mapboxSatellite));
    mapLayer.set(mapLayerOrder[mapLayerOrder.length - 1]);
  } else {
    document.getElementById('loading-modal')?.remove();
  }

  const position = Cartesian3.fromDegrees(103.77678, 1.28342, 800);

  let nusView = {
    destination: position,
    orientation: {
      heading: CesiumMath.toRadians(0.0),
      pitch: CesiumMath.toRadians(-30.0),
    },
  };
  viewer.camera.setView(nusView);

  // Add Cesium OSM Buildings, a global 3D buildings layer.
  const osmBuildingsTileset = await createOsmBuildingsAsync();

  // Clip osm buildings that are rendered
  osmBuildingsTileset.clippingPlanes = new ClippingPlaneCollection({
    modelMatrix: Transforms.eastNorthUpToFixedFrame(position),
    planes: [
      new ClippingPlane(new Cartesian3(1.0, 0.0, 0.0), 850),
      new ClippingPlane(new Cartesian3(-1.0, 0.0, 0.0), 700),
      new ClippingPlane(new Cartesian3(0.0, 1.0, 0.0), -600),
      new ClippingPlane(new Cartesian3(0.0, -1.0, 0.0), 2800),
    ],
    unionClippingRegions: true,
  });
  osmBuildingsTileset.style = new Cesium3DTileStyle({
    show: { conditions: OSM_SHOW_CONDITIONS },
  });
  osmBuildingsTileset.maximumScreenSpaceError = 0;
  viewer.scene.primitives.add(osmBuildingsTileset);

  const sde4Id = 2464285;
  const yncId = 2463878;
  const sde4 = await Cesium3DTileset.fromIonAssetId(sde4Id);
  const ync = await Cesium3DTileset.fromIonAssetId(yncId);
  const bimModels = [sde4, ync];
  for (let i = 0; i < bimModels.length; i++) {
    viewer.scene.primitives.add(bimModels[i]);
  }

  function showAllBIM() {
    for (let i = 0; i < bimModels.length; i++) {
      bimModels[i].show = true;
    }
  }

  function hideAllBIM() {
    for (let i = 0; i < bimModels.length; i++) {
      bimModels[i].show = false;
    }
  }

  function colorByDistance(selectedLatitude: number, selectedLongitude: number) {
    colorByDistancePosition.set({
      latitude: selectedLatitude,
      longitude: selectedLongitude,
    });

    osmBuildingsTileset.style = new Cesium3DTileStyle({
      defines: {
        distance: `distance(vec2(\${feature['cesium#longitude']}, \${feature['cesium#latitude']}), vec2(${selectedLongitude},${selectedLatitude}))`,
      },
      color: { conditions: OSM_DISTANCE_COLORS },
      show: { conditions: OSM_SHOW_CONDITIONS },
    });
  }

  function colorByOff() {
    osmBuildingsTileset.style = new Cesium3DTileStyle({ show: { conditions: OSM_SHOW_CONDITIONS } });
  }

  const handler = viewer.screenSpaceEventHandler;
  handler.setInputAction(function (movement: any) {
    const pickedFeature = viewer.scene.pick(movement.position);
    if (!defined(pickedFeature)) {
      return;
    }

    if (defined(pickedFeature)) {
      // TODO: Improve handling of BIM picker
      if (bimModels.includes(pickedFeature.primitive)) {
        const resource = pickedFeature.primitive.resource;

        activeMenu.set('BuildingInfo');
        if (resource.url.includes(yncId)) {
          buildingProperties.set({ name: 'Yale-NUS College' });
        }

        if (resource.url.includes(sde4Id)) {
          buildingProperties.set({ name: 'SDE4' });
        }

        return;
      }

      if (isSelectColorByDistance.get()) {
        colorByDistance(pickedFeature.getProperty('cesium#latitude'), pickedFeature.getProperty('cesium#longitude'));
        isSelectColorByDistance.set(false);
        return;
      }

      activeMenu.set('BuildingInfo');
      const featureId = pickedFeature.getProperty('elementId');
      const featureData = buildingsData.filter((d) => d.elementId == featureId);

      if (featureData.length > 0) {
        buildingProperties.set(featureData[0]);
      } else {
        buildingProperties.set({ name: pickedFeature.getProperty('name') });
      }

      // TODO: Use buildingsData only in the future
      searchQuery.set(buildingProperties.get()['name'] || '');
    }
  }, ScreenSpaceEventType.LEFT_CLICK);

  const menu = document.getElementById('menu');
  menu?.addEventListener('click', () => {
    // Timeout is necessary to allow for the state to update first
    setTimeout(() => {
      const showOsmBuildings = buildingDataLayer.get() === 'osm';
      const showBIM = buildingDataLayer.get() === 'bim';
      if (showOsmBuildings) {
        osmBuildingsTileset.show = true;
      } else {
        osmBuildingsTileset.show = false;
      }

      if (showBIM) {
        colorByOff();
        showAllBIM();
      } else {
        hideAllBIM();
      }

      if (buildingColorSetting.get() === 'distance') {
        const { latitude, longitude } = colorByDistancePosition.get();
        colorByDistance(latitude, longitude);
      } else {
        colorByOff();
      }
    });
  });

  const homeBtn = document.getElementById('home-btn');
  homeBtn!.onclick = () => viewer.camera.flyTo(nusView);

  const mapPickerBtn = document.getElementById('map-picker-btn');
  mapPickerBtn?.addEventListener('click', () => {
    setTimeout(() => {
      const mapPicker = document.getElementById('map-picker');
      mapPicker?.addEventListener('click', () => {
        setTimeout(() => {
          const layer = mapLayer.get();
          viewer.imageryLayers.raiseToTop(viewer.imageryLayers.get(mapLayerOrder.indexOf(layer)));
          mapLayerOrder = [...mapLayerOrder.filter((l) => l !== layer), layer];
        });
      });
    });
  });

  let totalTiles = 0;
  let canStartCount = false;
  function tileLoadProgressListener(queuedTiles: number) {
    const prevTotalTiles = totalTiles;
    totalTiles = Math.max(totalTiles, queuedTiles);

    if (prevTotalTiles == totalTiles) {
      canStartCount = true;
    }

    if (canStartCount) {
      loadPercentage!.textContent = `${offsetPercent + Math.round(((totalTiles - queuedTiles) / totalTiles) * (100 - offsetPercent))}`;
    }

    if (viewer.scene.globe.tilesLoaded && osmBuildingsTileset.allTilesLoaded) {
      document.getElementById('loading-modal')?.classList.add('close');
      setTimeout(() => {
        document.getElementById('loading-modal')?.remove();
      }, 200);
      viewer.scene.globe.tileLoadProgressEvent.removeEventListener(tileLoadProgressListener);
    }
  }

  viewer.scene.globe.tileLoadProgressEvent.addEventListener(tileLoadProgressListener);
</script>

<div id="cesiumContainer"></div>
<div id="loading-modal">
  <h1>NUS Digital Twin</h1>
  <div>
    Application is loading...
    <span id="load-percentage">0</span>%
  </div>
</div>

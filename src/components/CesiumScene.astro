---
import 'cesium/Build/Cesium/Widgets/widgets.css';
---

<style>
  #cesiumContainer {
    height: 100dvh;
    max-height: 100%;
  }
</style>

<script>
  import buildingsData from '../content/buildings/buildings.json';

  window.CESIUM_BASE_URL = '/cesium';

  import { activeMenu, buildingProperties, searchQuery, buildingDataLayer, mapLayer } from '../store';

  import {
    Cartesian3,
    createOsmBuildingsAsync,
    Ion,
    Math as CesiumMath,
    Terrain,
    Viewer,
    Cesium3DTileStyle,
    IonImageryProvider,
    ImageryLayer,
    ScreenSpaceEventType,
    defined,
    MapboxStyleImageryProvider,
  } from 'cesium';

  const isDev = import.meta.env.DEV;

  Ion.defaultAccessToken = import.meta.env.PUBLIC_CESIUM_TOKEN;

  const mapboxSatellite = new MapboxStyleImageryProvider({
    styleId: 'satellite-v9',
    accessToken: import.meta.env.PUBLIC_MAPBOX_TOKEN,
  });

  const mapboxDark = new MapboxStyleImageryProvider({
    styleId: 'dark-v11',
    accessToken: import.meta.env.PUBLIC_MAPBOX_TOKEN,
  });

  const mapboxStreet = new MapboxStyleImageryProvider({
    styleId: 'streets-v12',
    accessToken: import.meta.env.PUBLIC_MAPBOX_TOKEN,
  });

  // Initialize the Cesium Viewer in the HTML element with the `cesiumContainer` ID.
  const viewer = new Viewer('cesiumContainer', {
    terrain: Terrain.fromWorldTerrain(),
    navigationHelpButton: false,
    homeButton: false,
    fullscreenButton: false,
    baseLayerPicker: false,
    sceneModePicker: false,
    animation: false, // Disables the Cesium animation clock
    geocoder: false, // Disables the Cesium search button
  });

  let mapLayerOrder = ['satellite', 'dark', 'street'];
  viewer.imageryLayers.removeAll();
  viewer.imageryLayers.addImageryProvider(mapboxSatellite);
  viewer.imageryLayers.addImageryProvider(mapboxDark);
  viewer.imageryLayers.addImageryProvider(mapboxStreet);

  if (isDev) {
    viewer.imageryLayers.add(ImageryLayer.fromProviderAsync(IonImageryProvider.fromAssetId(3954), {}));
    mapLayerOrder.push('sentinel');
  }

  mapLayer.set(mapLayerOrder[mapLayerOrder.length - 1]);

  let nusView = {
    destination: Cartesian3.fromDegrees(103.77678, 1.28342, 800),
    orientation: {
      heading: CesiumMath.toRadians(0.0),
      pitch: CesiumMath.toRadians(-30.0),
    },
  };

  // Initial view
  viewer.camera.setView(nusView);

  // Add Cesium OSM Buildings, a global 3D buildings layer.
  const osmBuildingsTileset = await createOsmBuildingsAsync();
  viewer.scene.primitives.add(osmBuildingsTileset);

  function colorByDistance(selectedLatitude: number, selectedLongitude: number) {
    osmBuildingsTileset.style = new Cesium3DTileStyle({
      defines: {
        distance: `distance(vec2(\${feature['cesium#longitude']}, \${feature['cesium#latitude']}), vec2(${selectedLongitude},${selectedLatitude}))`,
      },
      color: {
        conditions: [
          ['${distance} > 0.0155', "color('#08498a')"],
          ['${distance} > 0.015', "color('#085395')"],
          ['${distance} > 0.0145', "color('#085da0')"],
          ['${distance} > 0.014', "color('#0867ab')"],
          ['${distance} > 0.0135', "color('#0f6faf')"],
          ['${distance} > 0.013', "color('#1878b4')"],
          ['${distance} > 0.0125', "color('#2081b8')"],
          ['${distance} > 0.012', "color('#298abd')"],
          ['${distance} > 0.0115', "color('#3192c1')"],
          ['${distance} > 0.011', "color('#3a9cc7')"],
          ['${distance} > 0.0105', "color('#42a6cc')"],
          ['${distance} > 0.01', "color('#4bb0d1')"],
          ['${distance} > 0.0095', "color('#54b6d1')"],
          ['${distance} > 0.009', "color('#5fbdcd')"],
          ['${distance} > 0.0085', "color('#6bc3c9')"],
          ['${distance} > 0.008', "color('#76c9c6')"],
          ['${distance} > 0.0075', "color('#80cec2')"],
          ['${distance} > 0.007', "color('#8bd2bf')"],
          ['${distance} > 0.0065', "color('#97d6bb')"],
          ['${distance} > 0.006', "color('#a2dbb7')"],
          ['${distance} > 0.0055', "color('#abdeb6')"],
          ['${distance} > 0.005', "color('#b4e2ba')"],
          ['${distance} > 0.0045', "color('#bde5be')"],
          ['${distance} > 0.004', "color('#c6e9c2')"],
          ['${distance} > 0.0035', "color('#cdebc6')"],
          ['${distance} > 0.003', "color('#d2edcc')"],
          ['${distance} > 0.0025', "color('#d7efd1')"],
          ['${distance} > 0.002', "color('#dcf1d7')"],
          ['${distance} > 0.0015', "color('#e1f3dc')"],
          ['${distance} > 0.001', "color('#e6f6e1')"],
          ['${distance} > 0.0005', "color('#ecf8e6')"],
        ],
      },
      show: {
        conditions: [
          ["${feature['cesium#longitude']} > 103.78171", false],
          ["${feature['cesium#longitude']} < 103.77022", false],
          ["${feature['cesium#latitude']} < 1.29088", false],
          ["${feature['cesium#latitude']} > 1.30824", false],
        ],
      },
    });
  }

  colorByDistance(1.29563, 103.77515);

  const handler = viewer.screenSpaceEventHandler;
  handler.setInputAction(function (movement: any) {
    const pickedFeature = viewer.scene.pick(movement.position);
    if (!defined(pickedFeature)) {
      return;
    }

    if (defined(pickedFeature)) {
      activeMenu.set('BuildingInfo');
      colorByDistance(pickedFeature.getProperty('cesium#latitude'), pickedFeature.getProperty('cesium#longitude'));
      const featureName = pickedFeature.getProperty('name') || '';
      const featureData = buildingsData.filter((d) => d.name === featureName);

      if (featureData.length > 0) {
        buildingProperties.set(featureData[0]);
      } else {
        buildingProperties.set({ name: featureName });
      }

      searchQuery.set(featureName);
    }
  }, ScreenSpaceEventType.LEFT_CLICK);

  const menu = document.getElementById('menu');
  menu?.addEventListener('click', () => {
    // Timeout is necessary to allow for the state to update first
    setTimeout(() => {
      const showOsmBuildings = buildingDataLayer.get() === 'osm';
      if (showOsmBuildings) {
        osmBuildingsTileset.show = true;
      } else {
        osmBuildingsTileset.show = false;
      }
    });
  });

  const homeBtn = document.getElementById('home-btn');
  homeBtn!.onclick = () => viewer.camera.flyTo(nusView);

  const mapPickerBtn = document.getElementById('map-picker-btn');
  mapPickerBtn?.addEventListener('click', () => {
    setTimeout(() => {
      const mapPicker = document.getElementById('map-picker');
      mapPicker?.addEventListener('click', () => {
        setTimeout(() => {
          const layer = mapLayer.get();
          viewer.imageryLayers.raiseToTop(viewer.imageryLayers.get(mapLayerOrder.indexOf(layer)));
          mapLayerOrder = [...mapLayerOrder.filter((l) => l !== layer), layer];
        });
      });
    });
  });
</script>

<div id="cesiumContainer"></div>

/* ==========================================================================
   PRIMITIVES
   Contain styles for components in the primitive folder, such as
   AutoHeight and ScrollContainer
   ========================================================================== */

// Force react-animate-height to animate unless
// reduce motion is toggled on
.rah-animating {
  body.reduce-motion & {
    transition: none !important;
  }
  transition: height 300ms ease !important;
}

.auto-height-container {
  display: flex;
  flex-direction: column;

  > * + * {
    margin-top: var(--content-gap);
  }
}

.scroll-area-root {
  width: 100%;
  height: 100%;
  overflow: hidden;
  --scrollbar-size: 10px;
}

.scroll-area-viewport {
  width: 100%;
  height: 100%;
  border-radius: inherit;
  --overlay-size: 2.5rem;

  &.overlay-top {
    mask-image: linear-gradient(180deg, transparent, #000 var(--overlay-size), #000 100%, transparent);
  }

  &.overlay-bottom {
    mask-image: linear-gradient(180deg, transparent, #000 1px, #000 calc(100% - var(--overlay-size)), transparent);
  }

  &.overlay-bottom.overlay-top {
    mask-image: linear-gradient(
      180deg,
      transparent,
      #000 var(--overlay-size),
      #000 calc(100% - var(--overlay-size)),
      transparent
    );
  }
}

.scroll-area-scrollbar {
  display: flex;
  user-select: none;
  touch-action: none;
  padding: 2px;
  background: transparent;
  border-radius: var(--rounded-base);
  transition: background 150ms ease-out;

  &:hover {
    background: rgba(var(--base-100));
  }

  &[data-orientation='vertical'] {
    width: var(--scrollbar-size);
    height: 100%;
  }
}

.scroll-area-thumb {
  flex: 1;
  background: rgba(var(--base-300), 0.7);
  border-radius: var(--scrollbar-size);
  position: relative;

  &::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    height: 100%;
    min-width: 44px;
    min-height: 44px;
  }
}
